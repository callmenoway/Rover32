//? Configurazione del generatore Prisma Client
generator client {
  provider = "prisma-client-js"
}

//? Configurazione della fonte di dati PostgreSQL
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

//? Modello User per gestire gli utenti dell'applicazione
model User {
  id            String    @id @default(cuid())      // ID univoco generato automaticamente
  username      String?                             // Username opzionale
  email         String    @unique                   // Email univoca per login
  emailVerified DateTime?                           // Data verifica email
  image         String?                             // URL immagine profilo
  password      String                              // Password hashata
  accounts      Account[]                           // Relazione con account esterni
  sessions      Session[]                           // Relazione con sessioni utente
  vehicles      Vehicle[]                           // Relazione con veicoli posseduti
  apiKeys       ApiKey[]                            // Relazione con chiavi API
  createdAt     DateTime  @default(now())           // Data creazione utente
  updatedAt     DateTime  @updatedAt                // Data ultimo aggiornamento
}

//? Modello Account per autenticazione esterna (Google, GitHub, ecc.)
model Account {
  id                String  @id @default(cuid())    // ID univoco account
  userId            String                          // ID utente proprietario
  provider          String                          // Provider autenticazione (es. Google)
  providerAccountId String                          // ID fornito dal provider
  type              String                          // Tipo account (OAuth, ecc.)
  access_token      String? @map("accessToken")     // Token di accesso
  expires_at        Int?                            // Scadenza token
  refresh_token     String? @db.Text                // Token di aggiornamento
  scope             String?                         // Ambiti autorizzazione
  id_token          String? @db.Text                // Token ID autenticazione
  session_state     String?                         // Stato sessione
  token_type        String? @map("tokenType")       // Tipo token
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  //? Indici e vincoli
  @@unique([provider, providerAccountId])           // Unicità provider + providerAccountId
  @@map("Account")                                  // Nome tabella nel DB
  @@index([userId])                                 // Indice su userId
}

//? Modello Session per gestire le sessioni dell'utente
model Session {
  id           String   @id @default(cuid())        // ID univoco sessione
  sessionToken String   @unique                     // Token sessione univoco
  userId       String                               // ID utente proprietario
  expires      DateTime                             // Scadenza sessione
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])                                 // Indice su userId
}

//? Modello VerificationToken per la verifica dell'email e recupero password
model VerificationToken {
  identifier String                                 // Identificatore (es. email)
  token      String   @unique                       // Token univoco verifica
  expires    DateTime                               // Scadenza token
  @@unique([identifier, token])                     // Unicità combinazione identifier+token
}

//? Modello Vehicle per gestire i veicoli degli utenti
model Vehicle {
  id               String         @id @default(cuid()) // ID univoco veicolo
  name             String                             // Nome veicolo
  ipAddress        String                             // Indirizzo IP veicolo
  macAddress       String         @unique              // MAC address univoco
  uptimeHours      Float          @default(0)          // Ore di funzionamento
  controlHours     Float          @default(0)          // Ore di controllo
  kilometersDriven Float          @default(0)          // Km percorsi
  userId           String                                 // ID utente proprietario
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  stats            VehicleStats[]                        // Relazione con statistiche veicolo
  createdAt        DateTime       @default(now())        // Data creazione veicolo
  updatedAt        DateTime       @updatedAt             // Data ultimo aggiornamento
  @@index([userId])                                     // Indice su userId
}

//? Modello VehicleStats per statistiche giornaliere dei veicoli
model VehicleStats {
  id               String   @id @default(cuid())        // ID univoco statistica
  date             DateTime @db.Date                    // Data statistica
  uptimeHours      Float    @default(0)                 // Ore di funzionamento
  controlHours     Float    @default(0)                 // Ore di controllo
  kilometersDriven Float    @default(0)                 // Km percorsi
  vehicleId        String                               // ID veicolo
  vehicle          Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  createdAt        DateTime @default(now())             // Data creazione statistica
  updatedAt        DateTime @updatedAt                  // Data ultimo aggiornamento

  @@unique([vehicleId, date])                           // Unicità veicolo+data
  @@index([vehicleId])                                  // Indice su vehicleId
  @@index([date])                                       // Indice su data
}

//? Modello ApiKey per gestire le chiavi API degli utenti
model ApiKey {
  id        String   @id @default(cuid())           // ID univoco chiave API
  key       String   @unique                        // Chiave API univoca
  name      String                                // Nome chiave API
  userId    String                                // ID utente proprietario
  createdAt DateTime @default(now())              // Data creazione chiave
  lastUsed  DateTime?                             // Ultimo utilizzo chiave
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])                                 // Indice su userId
}
